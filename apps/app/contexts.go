// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// unnamed API: Application Contexts
//
// Command:
// $ goagen
// --design=github.com/aya-eiya/goa-test/design/app
// --out=$(GOPATH)/src/github.com/aya-eiya/goa-test/apps
// --version=v1.4.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// MyActionMyResorceContext provides the my_resorce my_action action context.
type MyActionMyResorceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *MyType
}

// NewMyActionMyResorceContext parses the incoming request URL and body, performs validations and creates the
// context used by the my_resorce controller my_action action.
func NewMyActionMyResorceContext(ctx context.Context, r *http.Request, service *goa.Service) (*MyActionMyResorceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MyActionMyResorceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MyActionMyResorceContext) OK(r *MyTypes) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
