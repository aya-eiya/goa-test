// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// unnamed API: my_resorce Resource Client
//
// Command:
// $ goagen
// --design=github.com/aya-eiya/goa-test/design/app
// --out=$(GOPATH)/src/github.com/aya-eiya/goa-test/apps
// --version=v1.4.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// MyActionMyResorcePath computes a request path to the my_action action of my_resorce.
func MyActionMyResorcePath() string {

	return fmt.Sprintf("/actions/my_action")
}

// my action
func (c *Client) MyActionMyResorce(ctx context.Context, path string, payload *MyType, contentType string) (*http.Response, error) {
	req, err := c.NewMyActionMyResorceRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewMyActionMyResorceRequest create the request corresponding to the my_action action endpoint of the my_resorce resource.
func (c *Client) NewMyActionMyResorceRequest(ctx context.Context, path string, payload *MyType, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	w := multipart.NewWriter(&body)
	{
		fw, err := w.CreateFormField("arrs")
		if err != nil {
			return nil, err
		}
		tmp2 := make([]string, len(payload.Arrs))
		for i, e := range payload.Arrs {
			tmp3 := e
			tmp2[i] = tmp3
		}
		s := strings.Join(tmp2, ",")
		if _, err := fw.Write([]byte(s)); err != nil {
			return nil, err
		}
	}
	{
		fw, err := w.CreateFormField("intVal")
		if err != nil {
			return nil, err
		}
		s := strconv.Itoa(payload.IntVal)
		if _, err := fw.Write([]byte(s)); err != nil {
			return nil, err
		}
	}
	if err := w.Close(); err != nil {
		return nil, err
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", w.FormDataContentType())
	return req, nil
}
